from mdp import *
#here we will define the worlds that we will iterate through with the algorithms
# List[((int,int) (state), String action (R/D), int item #, Float Reward, Float Cost), ...]

# ----------------------------------------------------------------------WORLD DESC.-------------------------------------------------------------------------------------------------
# GridMDP (Grid, terminals, initial, gama)
# grid[reward]
# 0 == 0.001
# east, north

midterm_world = GridMDP(
    [
    #    y
    #    0, 1
        [10, None],    #2  (0,2) (1,2)
        [0.01, -10],   #1  (0,1) (1,1)
        [0.01, 1]      #0  (0,0) (1,0) x
    ],
    terminals=
    [
        # x,y
        (0, 2),
        (1, 1),
        (1, 0)
    ]
)
mid_world = [[10, None], [0.01, -10],[0.01, 1]]

shop_world = [
    # 0,  1 WHEN THE VALUES IN (0, ..) IS HIGHEST, WE GO TO COSTCO
    # and that is how much money we save by going to costco
    [10, 0.001], #10 [(0,10) (1,10)]
    [9, 5],      #9  [(0,9) (1,9)]
    [8, 10],     #8  [(0,8) (1,8)]
    [7, 15],     #7  [(0,7) (1,7)]
    [6, 19],     #6  [(0,6) (1,6)]
    [5, 20],     #5  [(0,5) (1,5)]
    [4, 30],     #4  [(0,4) (1,4)]
    [3, 33],     #3  [(0,3) (1,3)]
    [2, 42],     #2  [(0,2) (1,2)]
    [1, 45],     #1  [(0,1) (1,1)]
    [0.001, 50]  #0  [(0,0) (1,0)]
]
shopping_world = GridMDP(
    [

        # 0,  1 WHEN THE VALUES IN (0, ..) IS HIGHEST, WE GO TO COSTCO
        # and that is how much money we save by going to costco
        [10, 0.001], #10 [(0,10) (1,10)]
        [9, 5],      #9  [(0,9) (1,9)]
        [8, 10],     #8  [(0,8) (1,8)]
        [7, 15],     #7  [(0,7) (1,7)]
        [6, 19],     #6  [(0,6) (1,6)]
        [5, 20],     #5  [(0,5) (1,5)]
        [4, 30],     #4  [(0,4) (1,4)]
        [3, 33],     #3  [(0,3) (1,3)]
        [2, 42],     #2  [(0,2) (1,2)]
        [1, 45],     #1  [(0,1) (1,1)]
        [0.001, 50]  #0  [(0,0) (1,0)]
    ],
    terminals=
    [
    #    x, y
        (1,0),
        (1,1),
        (1,2),
        (1,3),
        (1,4),
        (1,5),
        (1,6),
        (1,7),
        (1,8),
        (1,9),
        (1,10)
    ]
)
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
